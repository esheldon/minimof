#!/usr/bin/env python
from __future__ import print_function
import os
import time
import yaml
import esutil as eu
import numpy as np
import minimof
from minimof import mof
import ngmix
import sep
import fitsio

try:
    xrange
except:
    xrange=range

from argparse import ArgumentParser
parser=ArgumentParser()

parser.add_argument('config_file',help='config file name')
parser.add_argument('seed',type=int,help='seed for sim')
parser.add_argument('ntrial',type=int,help='number to simulate')
parser.add_argument('--stamps',
                    action='store_true',
                    help='use postage stamps')
parser.add_argument('--uberseg',
                    action='store_true',
                    help='use uberseg')




parser.add_argument('--save',
                    action='store_true',
                    help='save plots and outputs')

parser.add_argument('--show',
                    action='store_true',
                    help='show plots')
parser.add_argument('--show-corrected',
                    action='store_true',
                    help='show plots with neighbors subtracted')

parser.add_argument('--size',
                    type=int,
                    default=1000,
                    help='size of plot')
parser.add_argument('--corrected-size',
                    type=int,
                    default=1000,
                    help='size of corrected plot')



parser.add_argument('--trueguess',
                    action='store_true',
                    help='use true guess')
parser.add_argument('--pdfguess',
                    action='store_true',
                    help='use true guess')
parser.add_argument('--trueprior',
                    action='store_true',
                    help='use true priors')

def make_full_images(dims, fitter, list_of_obs, pars):
    """
    pars here have stamp coordinates
    """
    impars=pars.copy()
    nobj=len(list_of_obs)

    nband=len(list_of_obs[0])
    npars_per = 6+nband
    
    imlist=[]
    jlist=[]
    for band in xrange(nband):
        imlist.append( np.zeros(dims) )
        j=list_of_obs[0][band][0].jacobian
        j.set_cen(row=0, col=0)
        jlist.append(j)

    for iobj in xrange(nobj):

        for band,im in enumerate(imlist):
            j=jlist[band]

            # assuming single epoch
            obs=list_of_obs[iobj][band][0]
            meta=obs.meta

            gm = fitter.get_convolved_gmix(
                iobj,
                band=band,
            )

            # center relative to the fiducial center in
            # this postage stamp
            v, u = gm.get_cen()

            # original location, but now in bug image coords
            v0,u0 = j(meta['orig_row'], meta['orig_col'])

            v += v0
            u += u0

            gm.set_cen(v, u)

            gm._fill_image(im, jacobian=j)

    return imlist


def make_rgb(gim, rim, iim):
    import images
    rgb=images.get_color_image(
        #imi*fac,imr*fac,img*fac,
        iim.transpose(),
        rim.transpose(),
        gim.transpose(),
        nonlinear=0.1,
    )

    print("rgb shape:",rgb.shape)
    return rgb

def make_combined3(im, model_im):
    """
    rgb and diff
    """
    nrow, ncol = im.shape
    comb=np.zeros( (nrow, ncol*3) )

    diff=model_im-im
    comb[:, 0:ncol] = im
    comb[:, ncol:2*ncol] = model_im
    comb[:, 2*ncol:] = diff
    return comb

def make_combined2(im, model_im):
    """
    rgb and diff
    """
    nrow, ncol = im.shape
    comb=np.zeros( (nrow, ncol*2) )

    diff=model_im-im
    comb[:, 0:ncol] = im
    comb[:, ncol:] = diff
    return comb



def print_pars(nobj, npars_per, pars, front="    "):
    for i in range(nobj):
        beg=i*npars_per
        end=(i+1)*npars_per
        tpars=pars[beg:end]
        ngmix.print_pars(tpars, front=front)

def main():
    args=parser.parse_args()

    print("seed:",args.seed)
    with open(args.config_file) as fobj:
        config=yaml.load(fobj)

    nband=config['nband']

    filebase=os.path.basename(args.config_file).replace('.yaml','')
    filebase='%s-%d' % (filebase,args.seed)
    if args.stamps:
        filebase += '-stamps'

    if args.uberseg:
        filebase += '-uberseg'
        weight_type='uberseg'
    else:
        weight_type='weight'

    fitsfile=filebase+'.fits'
    print("will write to:",fitsfile)

    dt=[
        ('psf_T','f8'),
        ('guess','f8',6+nband),
        ('pars','f8',6+nband),
        ('pars_err','f8',6+nband),
        ('flux_s2n','f8',nband),
        ('s2n','f8'),
    ]

    detband=2

    sim=minimof.moftest.Sim(config, args.seed)
    fitrng = np.random.RandomState(sim.rng.randint(0,2**15))
    np.random.seed(fitrng.randint(0,2**15))

    tm_sim=0.0
    tm_fit=0.0
    tm_extract=0.0
    nfail=0
    ntry=2

    output=[]

    for itrial in range(args.ntrial):
        print("-"*70)
        print("%d/%d" % (itrial+1, args.ntrial))

        this_tm_sim = time.time()
        sim.make_obs()
        this_tm_sim = time.time()-this_tm_sim

        # this runs sextractor
        this_tm_extract = time.time()
        medser = sim.get_medsifier()
        this_tm_extract = time.time() - this_tm_extract 

        segmap=medser.seg
        m2=medser.get_meds(detband)
        objects=m2.get_cat()

        print("found",len(objects),"objects")
        nobj=len(objects)

        if nobj == 0:
            print("failed to find any objects")
            nfail += 1
            continue

        this_tm_fit = time.time()

        if args.stamps:

            m=medser.get_multiband_meds()
            list_of_obs=[]
            for iobj in xrange(objects.size):
                mbo = m.get_mbobs(iobj, weight_type=weight_type)

                for olist in mbo:
                    for o in olist:
                        o.set_psf(sim.psf_obs)

                list_of_obs.append(mbo)

            prior=mof.get_mof_stamps_prior(list_of_obs, config['fit_model'], fitrng)
            fitter=minimof.mof.MOFStamps(
                list_of_obs,
                config['fit_model'],
                prior=prior,
            )


        else:
            prior = mof.get_mof_full_image_prior(
                objects,
                nband,
                sim.obs[0][0].jacobian,
                config['fit_model'],
                fitrng,
            )

            fitter=minimof.MOF(
                sim.obs,
                config['fit_model'],
                nobj,
                prior=prior,
            )

        for itry in range(ntry):
            if args.stamps:
                guess = mof.get_stamp_guesses(
                    list_of_obs, detband, config['fit_model'], fitrng,
                )
            else:
                guess = mof.get_full_image_guesses(
                    objects, nband, sim.obs[0][0].jacobian,
                    config['fit_model'], fitrng,
                )
            fitter.go(guess)
            res=fitter.get_result()
            if res['flags']==0:
                break

        this_tm_fit = time.time()-this_tm_fit

        tm_fit += this_tm_fit
        tm_sim += this_tm_sim
        tm_extract += this_tm_extract

        print("this time fit:",this_tm_fit)

        if args.show:
            rgb=make_rgb(
                sim.imlist[2],
                sim.imlist[1],
                sim.imlist[0],
            )


        if res['flags'] != 0:
            print("failed")
            nfail += 1

            if args.show:
                import images
                images.view(rgb/rgb.max())
                if i < (args.ntrial-1) and input('hit a key (q to quit): ')=='q':
                    return
        else:

            npars_per=guess.size//nobj

            data = np.zeros(nobj, dtype=dt)
            # assuming same psf T for all
            data['psf_T'] = sim.psf_obs.gmix.get_T()
            data['guess'] = guess.reshape(nobj, npars_per)
            data['pars'] = res['pars'].reshape(nobj, npars_per)
            perr=np.sqrt(np.diag(res['pars_cov']))
            data['pars_err'] = perr.reshape(nobj, npars_per)
            data['flux_s2n'] = data['pars'][:,6:]/data['pars_err'][:,6:]
            data['s2n'] = np.sqrt( (data['flux_s2n']**2).sum(axis=1) )
            output.append(data)

            if args.show or args.save:
                print("nfev:",res['nfev'])
                print_pars(nobj, npars_per, guess, front="guess: ")
                print_pars(nobj, npars_per, res['pars'], front="best_fit: ")

                if args.stamps:
                    # load a regular MOF fitter and use it to get the
                    # full image
                    model_image0, model_image1, model_image2=\
                        full_image_pars=make_full_images(
                            sim.imlist[2].shape,
                            fitter,
                            list_of_obs,
                            res['pars'],
                        )
                else:
                    model_image0 = fitter.make_image(0)
                    model_image1 = fitter.make_image(1)
                    model_image2 = fitter.make_image(2)

                model_rgb = make_rgb(
                    model_image0,
                    model_image1,
                    model_image2,
                )

                comb0 = make_combined3(sim.imlist[0], model_image0)
                comb1 = make_combined3(sim.imlist[1], model_image1)
                comb2 = make_combined3(sim.imlist[2], model_image2)

                comb_rgb = make_rgb(comb0, comb1, comb2)


                chi2 =  ( ( (model_image0-sim.imlist[0])**2).sum() / sim['noise_sigma']**2 )
                chi2 +=  ( ( (model_image1-sim.imlist[1])**2).sum() / sim['noise_sigma']**2 )
                chi2 +=  ( ( (model_image2-sim.imlist[2])**2).sum() / sim['noise_sigma']**2 )

                npars_tot=nobj*6+nband
                dof = 3*model_image0.size - npars_tot
                chi2per = chi2/dof
                print("chi2per:",chi2per)

                if args.show or args.save or args.show_corrected:
                    import images
                    import biggles
                    plt = biggles.Table(
                        2, 1,
                        #1,2,
                        #aspect_ratio=2.0/3.0,
                        aspect_ratio=0.5,
                        #title=r'$\chi^2/dof: %.2f$' % chi2per,
                    )
                    plt[0,0] = images.view(comb_rgb/comb_rgb.max(),
                                           title='image and diff',
                                           #scale=True,
                                           show=False)
                    plt[1,0] = images.view(segmap, title='segmap', show=False)
                    #plt[1,0] = images.view(diff,
                    #                       title='image-model',
                    #                       scale=True,
                    #                       show=False)


                    if args.show:
                        plt.show(
                            width=args.size*2,
                            height=args.size,
                        )

                    if args.save:
                        pngname='%s-diff-%06d' % (filebase,itrial)
                        if args.stamps:
                            pngname += '-stamps'
                        if args.uberseg:
                            pngname += '-uberseg'
                        pngname += '.png'
                        print("writing:",pngname)
                        plt.write_img(2*args.size, args.size, pngname)

                    nobj=fitter.get_nobj()
                    if nobj > 1 and args.show_corrected:
                        grid=eu.plotting.Grid(nobj)
                        tab=biggles.Table(grid.nrow, grid.ncol)
                        arat=float(grid.nrow)/grid.ncol
                        tab.aspect_ratio=arat
                        for ishow in range(nobj):
                            row,col=grid.get_rowcol(ishow)

                            tobs=fitter.make_corrected_obs(ishow,band=0,obsnum=0)
                            tab[row,col]=images.view(
                                tobs.image,
                                show=False,
                                title='%d' % ishow,
                            )

                        if args.show:
                            tab.show(
                                width=args.corrected_size,
                                height=args.corrected_size*arat,
                            )
                        if args.save:
                            pngname='%s-corr-%d-%06d.png' % (filebase,args.seed,itrial)
                            print("writing:",pngname)
                            tab.write_img(
                                args.corrected_size,
                                args.corrected_size*arat,
                                pngname,
                            )



                    if args.show or args.show_corrected:
                        if (itrial < (args.ntrial-1)
                                and input('hit a key (q to quit): ')=='q'):
                            return

    output = eu.numpy_util.combine_arrlist(output)
    fitsio.write(fitsfile, output, clobber=True)

    nuse=args.ntrial-nfail
    print("nfail: %d / %d %g" % (nfail, args.ntrial, float(nfail)/args.ntrial))
    print("time sim per trial:",tm_sim/nuse)
    print("time fit per trial:",tm_fit/nuse)
    print("time extract per trial:",tm_extract/nuse)
    print("output is in:",fitsfile)


if __name__=="__main__":
    main()
